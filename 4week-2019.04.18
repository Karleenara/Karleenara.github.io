	import tensorflow as tf #tensorflowf를 tf로 지정한다.
	tf.set_random_seed(777)  # for reproducibility # 랜덤 수 777개의 set을 만든다.
	

	filename_queue = tf.train.string_input_producer( 
	    ['data-01-test-score.csv'], shuffle=False, name='filename_queue') # 파일이름을 queue 로 지정하고 tf.train.string_input_producer를 이용하여 ['data-01-test-score.csv']를 불러온다. 파일 목록 지정.
	

	reader = tf.TextLineReader() # tf.TextLineReader를 reader로 변수를 지정한다. Reader 정의
	key, value = reader.read(filename_queue) #reader.read를 이용하여 filename_queue로부터 파일을 읽게 하면 value에 변수로 지정한다.
	

	# Default values, in case of empty columns. Also specifies the type of the
	# decoded result.
	record_defaults = [[0.], [0.], [0.], [0.]] #defalts값을 0으로 지정한다.
	xy = tf.decode_csv(value, record_defaults=record_defaults) # tf.decode_csv을 사용하여 파일을 디코딩한다.



	
	# collect batches of csv in
	train_x_batch, train_y_batch = \
	    tf.train.batch([xy[0:-1], xy[-1:]], batch_size=10) #batch size를 10개로 하여 x batch와 v batch에 각각 역할에 맞게 배분한다.

	
	# placeholders for a tensor that will be always fed.
	X = tf.placeholder(tf.float32, shape=[None, 3]) #데이터 정수32를 불러오고, 데이터 형태를 [None, 3]로 지정한다.
	Y = tf.placeholder(tf.float32, shape=[None, 1]) # 데이터 정수32를 불러오고, 데이터 형태를 [None, 1]로 지정한다.
	

	W = tf.Variable(tf.random_normal([3, 1]), name='weight') #벡터의 크기가 3, 출력 숫자 클래스가 1이고 이름을 weight로 지정한다.
	b = tf.Variable(tf.random_normal([1]), name='bias') #1차원 벡터이고 이름을 bias로 지정한다.
	

	# Hypothesis
	hypothesis = tf.matmul(X, W) + b # 상관관계 분석을 위한 hypothesis를 설정한다.


	# Simplified cost/loss function
	cost = tf.reduce_mean(tf.square(hypothesis - Y)) #예측값과 손실값의 거리를 cost함수로 정한다.
	

	# Minimize
	optimizer = tf.train.GradientDescentOptimizer(learning_rate=1e-5) #경사 하강법 최적화를 실행한다.
	train = optimizer.minimize(cost) #cost를 최소화하는 것이 최종목표이다.
	

	# Launch the graph in a session.
	sess = tf.Session() #세션을 생성한다.
	# Initializes global variables in the graph.
	sess.run(tf.global_variables_initializer()) #세션을 초기화 한 후 초기화 한 값을 실행한다.
	

	# Start populating the filename queue.
	coord = tf.train.Coordinator() #coordinator을 생성한다.
	threads = tf.train.start_queue_runners(sess=sess, coord=coord) #queuerunner를 실행하는 함수를 지정한다.
	

	for step in range(2001):
	    x_batch, y_batch = sess.run([train_x_batch, train_y_batch])#데이터를 배치로 가져옴
	    cost_val, hy_val, _ = sess.run(
	        [cost, hypothesis, train], feed_dict={X: x_batch, Y: y_batch})
	    if step % 10 == 0:
	        print(step, "Cost: ", cost_val, "\nPrediction:\n", hy_val) #만약 step이 10의 배수라면 프린트한다.


	
	coord.request_stop()#threads를 종료시킨다.
	coord.join(threads) #threads가 끝나기 전에 프로그램이 종료되는 것을 막기 위해 기다린다.
	

	# Ask my score
	print("Your score will be ",
	      sess.run(hypothesis, feed_dict={X: [[100, 70, 101]]})) #점수 예측한다.
	

	print("Other scores will be ",
	      sess.run(hypothesis, feed_dict={X: [[60, 70, 110], [90, 100, 80]]})) # 점수 예측
